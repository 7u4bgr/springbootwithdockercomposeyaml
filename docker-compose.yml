services:
  zookeeper:
    image: quay.io/debezium/zookeeper:latest
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    networks:
      - monitoring

  kafka:
    image: quay.io/debezium/kafka:latest
    ports:
      - 9092:9092
    links:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_MAX_REQUEST_SIZE=20000000
      - KAFKA_MESSAGE_MAX_BYTES=20000000
      - KAFKA_REPLICA_FETCH_MAX_BYTES=2000000
    networks:
      - monitoring

  connect:
    image: quay.io/debezium/connect:latest
    ports:
      - 8083:8083
    links:
      - kafka
      - db
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - CONNECT_MAX_REQUEST_SIZE=2000000
    networks:
      - monitoring

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-container
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - monitoring

  db:
    image: mysql:latest
    container_name: mysql-container
    environment:
      - MYSQL_ROOT_PASSWORD=Baku2018
      - MYSQL_DATABASE=grafanaDB
      - MYSQL_USER=grafanauser
      - MYSQL_PASSWORD=Baku2018
    ports:
      - "3314:3306"
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-container
    volumes:
      - /c/Users/Elchin/Desktop/demo/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-container
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_GENERIC_OAUTH_ENABLED=true
      - GF_AUTH_GENERIC_OAUTH_NAME=Keycloak
      - GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP=true
      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=spring-boot-app
      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=yPIOtszWsToLyDV8FLqvvxLZ3AgsLCBE
      - GF_AUTH_GENERIC_OAUTH_SCOPES=openid profile email
      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=http://localhost:8085/realms/mynewrealm/protocol/openid-connect/auth
      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=http://localhost:8085/realms/mynewrealm/protocol/openid-connect/token
      - GF_AUTH_GENERIC_OAUTH_API_URL=http://localhost:8085/realms/mynewrealm/protocol/openid-connect/userinfo
      - GF_AUTH_GENERIC_OAUTH_REDIRECT_URI=http://localhost:3000/login/generic_oauth
    ports:
      - "3000:3000"
    networks:
      - monitoring

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak-container
    environment:
      - KEYCLOAK_ADMIN=elcin
      - KEYCLOAK_ADMIN_PASSWORD=elcin
      - DB_VENDOR=mysql
      - DB_ADDR=db
      - DB_DATABASE=grafanaDB
      - DB_USER=grafanauser
      - DB_PASSWORD=Baku2018
    ports:
      - "8085:8080"
    networks:
      - monitoring
    depends_on:
      - db
    command: ["start-dev"]

  eureka-server:
    image: springcloud/eureka-server:latest
    container_name: eureka-server
    environment:
    - EUREKA_SERVER_PORT=8761
    - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
    - EUREKA_CLIENT_FETCH_REGISTRY=false
    - EUREKA_INSTANCE_HOSTNAME=eureka-server
    - EUREKA_SERVER_ENABLE_SELF_PRESERVATION=false
    ports:
    - "8761:8761"
    networks:
    - monitoring


  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: "swagger-ui"
    ports:
      - "8082:8080"
    volumes:
      - ./swagger/openapi.json:/openapi.json
    environment:
      SWAGGER_JSON: /openapi.json
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge
